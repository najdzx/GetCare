import React, { useState, useEffect, useCallback } from 'react';
import styles from './Patients.module.css';

const Patients = () => {
  // Patient data state
  const [myPatients, setMyPatients] = useState([
    {
      id: 1,
      userId: 'USR-2024-001',
      firstName: 'John',
      lastName: 'Smith',
      middleName: 'Michael',
      suffix: '',
      nickname: 'Johnny',
      dateOfBirth: '1985-03-15',
      sex: 'male',
      bloodType: 'A+',
      civilStatus: 'married',
      philhealthNo: '12-345678901-2',
      email: 'john.smith@email.com',
      primaryMobile: '+63 912 345 6789',
      medicalBackground: {
        knownConditions: 'Hypertension, Type 2 Diabetes',
        allergies: 'Penicillin, Shellfish',
        previousSurgeries: 'Appendectomy (2010)',
        familyHistory: 'Father: Heart disease, Mother: Diabetes',
        medications: 'Metformin 500mg, Lisinopril 10mg',
        supplements: 'Vitamin D3, Omega-3'
      },
      soapNotes: []
    },
    {
      id: 2,
      userId: 'USR-2024-002',
      firstName: 'Maria',
      lastName: 'Garcia',
      middleName: 'Santos',
      suffix: '',
      nickname: 'Mia',
      dateOfBirth: '1990-07-22',
      sex: 'female',
      bloodType: 'O+',
      civilStatus: 'single',
      philhealthNo: '12-987654321-0',
      email: 'maria.garcia@email.com',
      primaryMobile: '+63 917 654 3210',
      medicalBackground: {
        knownConditions: 'Asthma',
        allergies: 'Dust mites, Pollen',
        previousSurgeries: 'None',
        familyHistory: 'Mother: Asthma, Grandfather: Stroke',
        medications: 'Salbutamol inhaler',
        supplements: 'Vitamin C'
      },
      soapNotes: []
    }
  ]);

  const [sharedCases, setSharedCases] = useState([
    {
      id: 3,
      userId: 'USR-2024-003',
      firstName: 'Robert',
      lastName: 'Johnson',
      middleName: 'Lee',
      suffix: 'Jr.',
      nickname: 'Rob',
      dateOfBirth: '1978-11-08',
      sex: 'male',
      bloodType: 'B-',
      civilStatus: 'married',
      philhealthNo: '12-456789012-3',
      email: 'robert.johnson@email.com',
      primaryMobile: '+63 920 123 4567',
      sharedBy: 'Dr. Sarah Wilson',
      medicalBackground: {
        knownConditions: 'Chronic kidney disease',
        allergies: 'Iodine contrast',
        previousSurgeries: 'Kidney stone removal (2020)',
        familyHistory: 'Father: Kidney disease',
        medications: 'ACE inhibitor, Phosphate binder',
        supplements: 'Iron supplement'
      },
      soapNotes: []
    }
  ]);

  // UI state
  const [selectedPatientId, setSelectedPatientId] = useState(null);
  const [currentPatientTab, setCurrentPatientTab] = useState('my-patients');
  const [currentContentTab, setCurrentContentTab] = useState('basic-info');
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedVisitId, setSelectedVisitId] = useState(null);
  const [isEditMode, setIsEditMode] = useState(false);
  const [currentSOAPNote, setCurrentSOAPNote] = useState(null);
  const [remarksTemplate, setRemarksTemplate] = useState('default');

  // Sample visits data
  const visits = [
    {
      id: 1,
      date: '2024-01-15',
      chiefComplaint: 'Headache and fever for 2 days',
      diagnosis: 'Viral upper respiratory infection'
    },
    {
      id: 2,
      date: '2024-01-08',
      chiefComplaint: 'Follow-up for hypertension',
      diagnosis: 'Hypertension, controlled'
    },
    {
      id: 3,
      date: '2023-12-20',
      chiefComplaint: 'Annual check-up',
      diagnosis: 'Routine health maintenance'
    }
  ];

  // Calculate age from date of birth
  const calculateAge = useCallback((dateOfBirth) => {
    const today = new Date();
    const birthDate = new Date(dateOfBirth);
    let age = today.getFullYear() - birthDate.getFullYear();
    const monthDiff = today.getMonth() - birthDate.getMonth();
    
    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
      age--;
    }
    
    return age;
  }, []);

  // Filter patients based on search term
  const filteredPatients = useCallback(() => {
    const patients = currentPatientTab === 'my-patients' ? myPatients : sharedCases;
    if (!searchTerm) return patients;
    
    return patients.filter(patient => {
      const searchLower = searchTerm.toLowerCase();
      return (
        `${patient.firstName} ${patient.lastName}`.toLowerCase().includes(searchLower) ||
        patient.email.toLowerCase().includes(searchLower) ||
        patient.primaryMobile.includes(searchTerm)
      );
    });
  }, [currentPatientTab, myPatients, sharedCases, searchTerm]);

  // Get selected patient
  const selectedPatient = useCallback(() => {
    const allPatients = [...myPatients, ...sharedCases];
    return allPatients.find(p => p.id === selectedPatientId);
  }, [myPatients, sharedCases, selectedPatientId]);

  // Switch between patient tabs
  const switchPatientTab = (tab) => {
    setCurrentPatientTab(tab);
    setSelectedPatientId(null);
  };

  // Select a patient to view details
  const selectPatient = (patientId) => {
    setSelectedPatientId(patientId);
    setIsEditMode(false);
    setSelectedVisitId(null);
    setCurrentContentTab('basic-info');
  };

  // Switch between content tabs
  const switchContentTab = (tab) => {
    setCurrentContentTab(tab);
  };

  // Auto-expand textareas
  const autoExpandTextarea = (textarea) => {
    textarea.style.height = 'auto';
    textarea.style.height = `${Math.max(80, textarea.scrollHeight)}px`;
  };

  // Setup auto-expand for textareas
  useEffect(() => {
    const setupAutoExpand = () => {
      document.querySelectorAll(`.${styles['form-textarea']}`).forEach(textarea => {
        textarea.addEventListener('input', function() {
          autoExpandTextarea(this);
        });
        autoExpandTextarea(textarea);
      });
    };

    setupAutoExpand();
  }, [currentContentTab, selectedVisitId, isEditMode]);

  // Select a visit to view details
  const selectVisit = (visitId) => {
    setSelectedVisitId(visitId);
    setIsEditMode(false);
    
    // Load visit data
    const visitData = visits.find(v => v.id === visitId);
    if (visitData) {
      setCurrentSOAPNote({
        ...visitData,
        historyOfIllness: 'Patient reports onset of headache 2 days ago, accompanied by low-grade fever. No recent travel or sick contacts.',
        remarksNote: 'Patient appears mildly ill but alert and oriented.',
        objective: 'Temp 100.2Â°F, BP 120/80, HR 88, RR 16. HEENT: mild pharyngeal erythema. Lungs clear. Heart RRR.',
        diagnosis: 'Viral upper respiratory infection',
        plan: 'Supportive care, rest, fluids. Return if symptoms worsen or persist >7 days.',
        prescription: 'Acetaminophen 650mg q6h PRN fever/pain',
        testRequest: 'None at this time'
      });
    }
  };

  // Add new SOAP note
  const addNewSOAPNote = () => {
    setSelectedVisitId(null);
    setIsEditMode(true);
    setCurrentSOAPNote({
      id: null,
      date: new Date().toISOString().split('T')[0],
      chiefComplaint: '',
      historyOfIllness: '',
      remarksNote: '',
      objective: '',
      diagnosis: '',
      plan: '',
      prescription: '',
      testRequest: ''
    });
  };

  // Edit SOAP note
  const editSOAPNote = () => {
    setIsEditMode(true);
  };

  // Save SOAP note
  const saveSOAPNote = () => {
    alert('SOAP note has been saved successfully!');
    setIsEditMode(false);
  };

  // Schedule follow-up
  const scheduleFollowUp = () => {
    alert('Follow-up appointment has been scheduled successfully!');
  };

  // Send to patient
  const sendToPatient = (type) => {
    const typeName = type === 'prescription' ? 'Prescription' : 'Test Request';
    alert(`${typeName} has been sent to the patient successfully!`);
  };

  // Change remarks template
  const handleRemarksTemplateChange = (e) => {
    setRemarksTemplate(e.target.value);
  };

  // Render patient list
  const renderPatientList = () => {
    return filteredPatients().map(patient => {
      const age = calculateAge(patient.dateOfBirth);
      const initials = `${patient.firstName.charAt(0)}${patient.lastName.charAt(0)}`;
      
      return (
        <div 
          key={patient.id}
          className={`${styles['patient-item']} ${selectedPatientId === patient.id ? styles.active : ''} ${currentPatientTab === 'shared-cases' ? styles.shared : ''}`}
          onClick={() => selectPatient(patient.id)}
        >
          <div className={styles['patient-avatar']}>{initials}</div>
          <div className={styles['patient-details-text']}>
            <div className={styles['patient-name']}>{patient.firstName} {patient.lastName}</div>
            <div className={styles['patient-info']}>
              <span>{age} years old</span>
              <span>{patient.sex}</span>
              <span>{patient.bloodType || 'N/A'}</span>
            </div>
            {patient.sharedBy && <div className={styles['shared-by']}>Shared by {patient.sharedBy}</div>}
          </div>
        </div>
      );
    });
  };

  // Render basic info tab
  const renderBasicInfo = (patient) => {
    const age = calculateAge(patient.dateOfBirth);
    
    return (
      <div className={styles['info-grid']}>
        <div className={styles['info-group']}>
          <label className={styles['info-label']}>ID</label>
          <div className={styles['info-value']}>{patient.userId}</div>
        </div>
        <div className={styles['info-group']}>
          <label className={styles['info-label']}>First Name</label>
          <div className={styles['info-value']}>{patient.firstName}</div>
        </div>
        <div className={styles['info-group']}>
          <label className={styles['info-label']}>Last Name</label>
          <div className={styles['info-value']}>{patient.lastName}</div>
        </div>
        <div className={styles['info-group']}>
          <label className={styles['info-label']}>Middle Name</label>
          <div className={styles['info-value']}>{patient.middleName || 'N/A'}</div>
        </div>
        <div className={styles['info-group']}>
          <label className={styles['info-label']}>Suffix</label>
          <div className={styles['info-value']}>{patient.suffix || 'N/A'}</div>
        </div>
        <div className={styles['info-group']}>
          <label className={styles['info-label']}>Nickname</label>
          <div className={styles['info-value']}>{patient.nickname || 'N/A'}</div>
        </div>
        <div className={styles['info-group']}>
          <label className={styles['info-label']}>Date of Birth</label>
          <div className={styles['info-value']}>{new Date(patient.dateOfBirth).toLocaleDateString()}</div>
        </div>
        <div className={styles['info-group']}>
          <label className={styles['info-label']}>Age</label>
          <div className={styles['info-value']}>{age} years old</div>
        </div>
        <div className={styles['info-group']}>
          <label className={styles['info-label']}>Sex</label>
          <div className={styles['info-value']}>{patient.sex.charAt(0).toUpperCase() + patient.sex.slice(1)}</div>
        </div>
        <div className={styles['info-group']}>
          <label className={styles['info-label']}>Blood Type</label>
          <div className={styles['info-value']}>{patient.bloodType || 'Not Available'}</div>
        </div>
        <div className={styles['info-group']}>
          <label className={styles['info-label']}>Civil Status</label>
          <div className={styles['info-value']}>{patient.civilStatus.charAt(0).toUpperCase() + patient.civilStatus.slice(1)}</div>
        </div>
        <div className={styles['info-group']}>
          <label className={styles['info-label']}>PhilHealth No.</label>
          <div className={styles['info-value']}>{patient.philhealthNo || 'Not provided'}</div>
        </div>
        <div className={styles['info-group']}>
          <label className={styles['info-label']}>Email</label>
          <div className={styles['info-value']}>{patient.email || 'Not provided'}</div>
        </div>
        <div className={styles['info-group']}>
          <label className={styles['info-label']}>Primary Mobile</label>
          <div className={styles['info-value']}>{patient.primaryMobile}</div>
        </div>
      </div>
    );
  };

  // Render medical background tab
  const renderMedicalBackground = (patient) => {
    return (
      <div className={styles['medical-section']}>
        <div className={styles['info-grid']}>
          <div className={styles['info-group']}>
            <label className={styles['info-label']}>Known Medical Conditions</label>
            <div className={styles['info-value']}>{patient.medicalBackground.knownConditions || 'None reported'}</div>
          </div>
          <div className={styles['info-group']}>
            <label className={styles['info-label']}>Allergies</label>
            <div className={styles['info-value']}>{patient.medicalBackground.allergies || 'None reported'}</div>
          </div>
          <div className={styles['info-group']}>
            <label className={styles['info-label']}>Previous Surgeries</label>
            <div className={styles['info-value']}>{patient.medicalBackground.previousSurgeries || 'None reported'}</div>
          </div>
          <div className={styles['info-group']}>
            <label className={styles['info-label']}>Family History</label>
            <div className={styles['info-value']}>{patient.medicalBackground.familyHistory || 'None reported'}</div>
          </div>
          <div className={styles['info-group']}>
            <label className={styles['info-label']}>Current Medications</label>
            <div className={styles['info-value']}>{patient.medicalBackground.medications || 'None reported'}</div>
          </div>
          <div className={styles['info-group']}>
            <label className={styles['info-label']}>Supplements</label>
            <div className={styles['info-value']}>{patient.medicalBackground.supplements || 'None reported'}</div>
          </div>
        </div>
      </div>
    );
  };

  // Render visits list
  const renderVisitsList = () => {
    if (visits.length === 0) {
      return <div className={styles['empty-soap-state']}><p>No previous consults recorded.</p></div>;
    }

    return visits.map(visit => (
      <div 
        key={visit.id}
        className={`${styles['visit-item']} ${selectedVisitId === visit.id ? styles.active : ''}`}
        onClick={() => selectVisit(visit.id)}
      >
        <div className={styles['visit-date']}>
          {new Date(visit.date).toLocaleDateString('en-US', { 
            year: 'numeric', 
            month: 'short', 
            day: 'numeric' 
          })}
        </div>
        <div className={styles['visit-preview']}>
          <strong>CC:</strong> {visit.chiefComplaint}<br />
        </div>
      </div>
    ));
  };

  // Render SOAP form
  const renderSOAPForm = () => {
    if (!selectedVisitId && !isEditMode) {
      return (
        <div className={styles['empty-soap-state']}>
          <p>Select a previous consult from the left panel to view details, or click "Add New Note" to create a new SOAP note.</p>
        </div>
      );
    }

    const formClass = isEditMode ? styles['edit-mode'] : styles['view-mode'];
    const disabled = !isEditMode;
    
    return (
      <div className={formClass}>
        {isEditMode && !currentSOAPNote?.id && (
          <div className={styles['soap-section']}>
            <div className={styles['soap-title']}>Date</div>
            <input 
              type="date" 
              className={styles['form-input']} 
              id="consultDate" 
              defaultValue={currentSOAPNote?.date} 
              disabled={disabled}
            />
          </div>
        )}
        
        <div className={styles['soap-section']}>
          <div className={styles['soap-title']}>Chief Complaint</div>
          <textarea 
            className={styles['form-textarea']} 
            id="chiefComplaint" 
            placeholder="Enter chief complaint..." 
            defaultValue={currentSOAPNote?.chiefComplaint}
            disabled={disabled}
          />
        </div>
        
        <div className={styles['soap-section']}>
          <div className={styles['soap-title']}>History of Present Illness</div>
          <textarea 
            className={styles['form-textarea']} 
            id="historyOfIllness" 
            placeholder="Enter history of present illness..." 
            defaultValue={currentSOAPNote?.historyOfIllness}
            disabled={disabled}
          />
        </div>
        
        <div className={styles['soap-section']}>
          <div className={styles['soap-title']}>
            Remarks
            <select 
              className={styles['template-selector']} 
              id="remarksTemplate" 
              onChange={handleRemarksTemplateChange} 
              disabled={disabled}
              value={remarksTemplate}
            >
              <option value="default">Remarks</option>
              <option value="lab-results">Lab Results/Files</option>
              <option value="vitals">Vitals</option>
            </select>
          </div>
          <div id="remarksContent">
            <textarea 
              className={styles['form-textarea']} 
              id="remarksNote" 
              placeholder="Enter remarks..." 
              defaultValue={currentSOAPNote?.remarksNote}
              disabled={disabled}
            />
          </div>
        </div>
        
        <div className={styles['soap-section']}>
          <div className={styles['soap-title']}>Objective</div>
          <textarea 
            className={styles['form-textarea']} 
            id="objective" 
            placeholder="Enter objective findings..." 
            defaultValue={currentSOAPNote?.objective}
            disabled={disabled}
          />
        </div>
        
        <div className={styles['soap-section']}>
          <div className={styles['soap-title']}>Diagnosis</div>
          <textarea 
            className={styles['form-textarea']} 
            id="diagnosis" 
            placeholder="Enter diagnosis..." 
            defaultValue={currentSOAPNote?.diagnosis}
            disabled={disabled}
          />
        </div>
        
        <div className={styles['soap-section']}>
          <div className={styles['soap-title']}>Plan</div>
          <textarea 
            className={styles['form-textarea']} 
            id="plan" 
            placeholder="Enter treatment plan..." 
            defaultValue={currentSOAPNote?.plan}
            disabled={disabled}
          />
        </div>
        
        <div className={styles['soap-section']}>
          <div className={styles['soap-title']}>
            Prescription
            {isEditMode && (
              <button 
                className={styles['send-btn']} 
                onClick={() => sendToPatient('prescription')}
              >
                <svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16" style={{marginRight: '6px'}}>
                  <path d="M1 8a.5.5 0 0 1 .5-.5h11.793l-3.147-3.146a.5.5 0 0 1 .708-.708l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 0 1-.708-.708L13.293 8.5H1.5A.5.5 0 0 1 1 8z"/>
                </svg>
                Send to Patient
              </button>
            )}
          </div>
          <textarea 
            className={styles['form-textarea']} 
            id="prescription" 
            placeholder="Enter prescription details..." 
            defaultValue={currentSOAPNote?.prescription}
            disabled={disabled}
          />
        </div>
        
        <div className={styles['soap-section']}>
          <div className={styles['soap-title']}>
            Test Request
            {isEditMode && (
              <button 
                className={styles['send-btn']} 
                onClick={() => sendToPatient('test-request')}
              >
                <svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16" style={{marginRight: '6px'}}>
                  <path d="M1 8a.5.5 0 0 1 .5-.5h11.793l-3.147-3.146a.5.5 0 0 1 .708-.708l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 0 1-.708-.708L13.293 8.5H1.5A.5.5 0 0 1 1 8z"/>
                </svg>
                Send to Patient
              </button>
            )}
          </div>
          <textarea 
            className={styles['form-textarea']} 
            id="testRequest" 
            placeholder="Enter test requests..." 
            defaultValue={currentSOAPNote?.testRequest}
            disabled={disabled}
          />
        </div>
        
        <div className={styles['soap-form-actions']}>
          <button 
            className={styles['save-btn']} 
            onClick={scheduleFollowUp}
          >
            <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16" style={{marginRight: '8px'}}>
              <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z"/>
            </svg>
            Schedule Follow Up
          </button>
          {isEditMode ? (
            <button className={styles['save-btn']} onClick={saveSOAPNote}>Save</button>
          ) : (
            <button className={styles['save-btn']} onClick={editSOAPNote}>Edit</button>
          )}
        </div>
      </div>
    );
  };

  // Render patient details
  const renderPatientDetails = (patient) => {
    const age = calculateAge(patient.dateOfBirth);
    const initials = `${patient.firstName.charAt(0)}${patient.lastName.charAt(0)}`;
    
    return (
      <>
        <div className={styles['sticky-header']}>
          <div className={styles['patient-header']}>
            <div className={styles['patient-avatar-large']}>{initials}</div>
            <div className={styles['patient-title-section']}>
              <h2 className={styles['patient-title']}>{patient.firstName} {patient.lastName} {patient.suffix || ''}</h2>
              <div className={styles['patient-subtitle']}>
                {age} years old â¢ {patient.sex.charAt(0).toUpperCase() + patient.sex.slice(1)} â¢ {patient.bloodType || 'Blood type not available'}
              </div>
            </div>
          </div>
          
          <div className={styles['content-tabs']}>
            <button 
              className={`${styles['content-tab']} ${currentContentTab === 'basic-info' ? styles.active : ''}`} 
              onClick={() => switchContentTab('basic-info')}
            >
              Basic Information
            </button>
            <button 
              className={`${styles['content-tab']} ${currentContentTab === 'medical-background' ? styles.active : ''}`} 
              onClick={() => switchContentTab('medical-background')}
            >
              Medical Background
            </button>
            <button 
              className={`${styles['content-tab']} ${currentContentTab === 'soap-notes' ? styles.active : ''}`} 
              onClick={() => switchContentTab('soap-notes')}
            >
              SOAP Notes
            </button>
          </div>
        </div>
        
        <div className={styles['scrollable-content']}>
          {currentContentTab === 'basic-info' && renderBasicInfo(patient)}
          {currentContentTab === 'medical-background' && renderMedicalBackground(patient)}
          {currentContentTab === 'soap-notes' && (
            <div className={styles['soap-container']}>
              <div className={styles['soap-left-panel']}>
                <div className={styles['visits-header']}>
                  <h3>Consults</h3>
                  <button 
                    className={`${styles.btn} ${styles['btn-primary']} ${styles['btn-small']}`} 
                    onClick={addNewSOAPNote}
                  >
                    <svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16" style={{marginRight: '6px'}}>
                      <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z"/>
                    </svg>
                    Add New Note
                  </button>
                </div>
                <div className={styles['visits-list']}>
                  {renderVisitsList()}
                </div>
              </div>
              
              <div className={styles['soap-right-panel']}>
                <div className={styles['soap-form-header']}>
                  <h3>
                    {selectedVisitId ? `Visit - ${new Date(currentSOAPNote?.date).toLocaleDateString()}` : 
                     isEditMode ? 'New SOAP Note' : 'Select a visit or add new note'}
                  </h3>
                </div>
                <div className={styles['soap-form-content']}>
                  {renderSOAPForm()}
                </div>
              </div>
            </div>
          )}
        </div>
      </>
    );
  };

  return (
    <div className={styles.container}>
      <div className={styles.wrapper}>
        {/* Header */}
        <div className={styles.header}>
          <div className={styles['header-left']}>
            <h1 className={styles['page-title']}>Patients</h1>
            <div className={styles['search-container']}>
              <input 
                type="text" 
                className={styles['search-input']} 
                placeholder="Search patients..." 
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
              <svg className={styles['search-icon']} width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z"/>
              </svg>
            </div>
          </div>
        </div>

        {/* Content */}
        <div className={styles.content}>
          {/* Sidebar */}
          <div className={styles.sidebar}>
            <div className={styles['patient-tabs']}>
              <button 
                className={`${styles['tab-btn']} ${currentPatientTab === 'my-patients' ? styles.active : ''}`}
                onClick={() => switchPatientTab('my-patients')}
              >
                My Patients
              </button>
              <button 
                className={`${styles['tab-btn']} ${currentPatientTab === 'shared-cases' ? styles.active : ''}`}
                onClick={() => switchPatientTab('shared-cases')}
              >
                Shared Cases
              </button>
            </div>
            <div className={styles['patient-list']}>
              {renderPatientList()}
            </div>
          </div>

          {/* Main Content */}
          <div className={styles['main-content']}>
            {selectedPatientId ? (
              renderPatientDetails(selectedPatient())
            ) : (
              <div className={styles['empty-state']}>
                <h3>Select a Patient</h3>
                <p>Choose a patient from the list to view their information and SOAP notes</p>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Patients;

 <style>
        .container {
            height: calc(100vh - 100px);
            padding: 20px;
            font-family: "Poppins", sans-serif;
            background-color: #fafafa;
            margin: 0;
            box-sizing: border-box;
        }

        .wrapper {
            width: 100%;
            height: 100%;
            margin: 0 auto;
            display: flex;
            flex-direction: column;
            background-color: white;
            border-radius: 12px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
            border: 1px solid #f0f0f0;
            overflow: hidden;
            box-sizing: border-box;
        }

        .header {
            background-color: white;
            color: #333;
            padding: 24px 30px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            border-bottom: 1px solid #f5f5f5;
            box-sizing: border-box;
        }

        .header-left {
            display: flex;
            align-items: center;
            gap: 20px;
            min-width: 0;
            flex: 1;
        }

        .page-title {
            font-size: 24px;
            font-weight: 500;
            color: #1a1a1a;
            letter-spacing: -0.3px;
            margin: 0;
        }

        .search-container {
            position: relative;
            max-width: 300px;
            flex: 1;
        }

        .search-input {
            width: 100%;
            padding: 10px 40px 10px 12px;
            border: 1.5px solid #e0e0e0;
            border-radius: 8px;
            font-family: 'Poppins', sans-serif;
            font-size: 14px;
            transition: border-color 0.2s;
            box-sizing: border-box;
            margin: 0;
        }

        .search-input:focus {
            outline: none;
            border-color: #1a1a1a;
        }

        .search-icon {
            position: absolute;
            right: 12px;
            top: 50%;
            transform: translateY(-50%);
            color: #666;
        }

        .content {
            flex: 1;
            display: flex;
            overflow: hidden;
            box-sizing: border-box;
        }

        .sidebar {
            width: 350px;
            border-right: 1px solid #f5f5f5;
            background: #fafafa;
            overflow: hidden;
            box-sizing: border-box;
            display: flex;
            flex-direction: column;
        }

        .patient-tabs {
            display: flex;
            background: white;
            border-bottom: 1px solid #f5f5f5;
            flex-shrink: 0;
        }

        .patient-list {
            padding: 20px;
            overflow-y: auto;
            flex: 1;
        }

        .tab-btn {
            flex: 1;
            padding: 16px 20px;
            background: none;
            border: none;
            font-family: 'Poppins', sans-serif;
            font-size: 14px;
            font-weight: 400;
            color: #666;
            cursor: pointer;
            transition: all 0.2s;
            border-bottom: 2px solid transparent;
        }

        .tab-btn.active {
            color: #1a1a1a;
            font-weight: 500;
            border-bottom-color: #1a1a1a;
        }



        .patient-item {
            background: white;
            border: 1px solid #e8e8e8;
            border-radius: 8px;
            padding: 16px;
            margin-bottom: 12px;
            cursor: pointer;
            transition: all 0.2s;
            box-sizing: border-box;
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .patient-item:hover {
            border-color: #ddd;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        }

        .patient-item.active {
            border-color: #1a1a1a;
            background: #f8f8f8;
        }

        .patient-item.shared {
            border-left: 3px solid #666;
        }

        .patient-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            font-size: 14px;
            flex-shrink: 0;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        .patient-details-text {
            flex: 1;
            min-width: 0;
        }

        .patient-name {
            font-weight: 500;
            font-size: 16px;
            color: #1a1a1a;
            margin-bottom: 4px;
        }

        .patient-info {
            font-size: 12px;
            color: #666;
            display: flex;
            gap: 12px;
        }

        .shared-by {
            font-size: 11px;
            color: #999;
            margin-top: 4px;
            font-style: italic;
        }

        .main-content {
            flex: 1;
            overflow: hidden;
            box-sizing: border-box;
            display: flex;
            flex-direction: column;
        }

        .patient-details {
            flex: 1;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        .sticky-header {
            background: white;
            border-bottom: 1px solid #f5f5f5;
            z-index: 10;
            flex-shrink: 0;
        }

        .patient-header {
            display: flex;
            align-items: center;
            gap: 20px;
            padding: 30px 30px 20px 30px;
            border-bottom: 1px solid #f5f5f5;
        }

        .patient-avatar-large {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            font-size: 28px;
            flex-shrink: 0;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }

        .patient-title-section {
            flex: 1;
        }

        .patient-title {
            font-size: 24px;
            font-weight: 500;
            color: #1a1a1a;
            margin: 0 0 4px 0;
        }

        .patient-subtitle {
            font-size: 14px;
            color: #666;
        }

        .content-tabs {
            display: flex;
            padding: 0 30px;
            border-bottom: 1px solid #f5f5f5;
        }

        .scrollable-content {
            flex: 1;
            overflow-y: auto;
            padding: 30px;
        }

        .content-tab {
            padding: 12px 20px;
            background: none;
            border: none;
            font-family: 'Poppins', sans-serif;
            font-size: 14px;
            font-weight: 400;
            color: #666;
            cursor: pointer;
            transition: all 0.2s;
            border-bottom: 2px solid transparent;
        }

        .content-tab.active {
            color: #1a1a1a;
            font-weight: 500;
            border-bottom-color: #1a1a1a;
        }

        .tab-content {
            display: none;
            height: 100%;
        }

        .tab-content.active {
            display: block;
        }

        .info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .info-group {
            display: flex;
            flex-direction: column;
        }

        .info-label {
            font-weight: 500;
            color: #1a1a1a;
            margin-bottom: 6px;
            font-size: 13px;
        }

        .info-value {
            padding: 10px 12px;
            background: #f8f8f8;
            border: 1px solid #e8e8e8;
            border-radius: 6px;
            font-size: 14px;
            color: #333;
        }

        .medical-section {
            margin-bottom: 30px;
        }

        .section-title {
            font-size: 16px;
            font-weight: 500;
            color: #1a1a1a;
            margin-bottom: 15px;
            padding-bottom: 8px;
            border-bottom: 1px solid #f5f5f5;
        }

        .soap-section {
            margin-bottom: 25px;
        }

        .soap-title {
            font-size: 15px;
            font-weight: 500;
            color: #1a1a1a;
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 10px;
        }

        .send-btn {
            background: #f0f0f0;
            border: 1px solid #e0e0e0;
            color: #666;
            font-family: 'Poppins', sans-serif;
            font-size: 12px;
            cursor: pointer;
            display: flex;
            align-items: center;
            transition: all 0.2s;
            padding: 6px 12px;
            border-radius: 4px;
            font-weight: 500;
        }

        .send-btn:hover {
            background: #e8e8e8;
            color: #1a1a1a;
            border-color: #ccc;
        }

        .template-selector {
            padding: 6px 10px;
            border: 1px solid #e0e0e0;
            border-radius: 4px;
            font-size: 12px;
            font-family: 'Poppins', sans-serif;
            background: white;
            margin-left: auto;
        }

        .form-input, .form-textarea, .form-select {
            padding: 10px 12px;
            font-size: 14px;
            border: 1.5px solid #e0e0e0;
            border-radius: 6px;
            background: white;
            transition: border-color 0.2s;
            font-family: 'Poppins', sans-serif;
            font-weight: 400;
            width: 100%;
            line-height: 1.5;
            box-sizing: border-box;
            margin: 0;
        }

        .form-input:focus, .form-textarea:focus, .form-select:focus {
            outline: none;
            border-color: #1a1a1a;
        }

        .form-textarea {
            resize: none;
            min-height: 80px;
            overflow: hidden;
        }

        .vitals-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 15px;
        }

        .vital-group {
            display: flex;
            flex-direction: column;
        }

        .vital-label {
            font-size: 12px;
            font-weight: 500;
            color: #666;
            margin-bottom: 4px;
        }

        .vital-input {
            padding: 8px 10px;
            font-size: 13px;
            border: 1.5px solid #e0e0e0;
            border-radius: 4px;
            background: white;
            transition: border-color 0.2s;
            font-family: 'Poppins', sans-serif;
            box-sizing: border-box;
        }

        .vital-input:focus {
            outline: none;
            border-color: #1a1a1a;
        }

        .file-upload-area {
            border: 2px dashed #e0e0e0;
            border-radius: 8px;
            padding: 20px;
            text-align: center;
            margin-bottom: 15px;
            transition: border-color 0.2s;
        }

        .file-upload-area:hover {
            border-color: #ccc;
        }

        .file-upload-area.dragover {
            border-color: #1a1a1a;
            background: #f8f8f8;
        }

        .uploaded-files {
            margin-top: 10px;
        }

        .file-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 8px 12px;
            background: #f8f8f8;
            border-radius: 4px;
            margin-bottom: 5px;
        }

        .file-name {
            font-size: 13px;
            color: #333;
        }

        .file-remove {
            background: none;
            border: none;
            color: #ff4444;
            cursor: pointer;
            font-size: 12px;
        }

        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 6px;
            font-family: 'Poppins', sans-serif;
            font-weight: 400;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.2s;
            line-height: 1.4;
        }

        .btn-primary {
            background: #1a1a1a;
            color: white;
        }

        .btn-primary:hover {
            background: #333;
        }

        .btn-secondary {
            background: #f5f5f5;
            color: #666;
            border: 1px solid #e8e8e8;
        }

        .btn-secondary:hover {
            background: #eee;
        }

        .btn-small {
            padding: 6px 12px;
            font-size: 12px;
        }

        .action-buttons {
            display: flex;
            gap: 10px;
            margin-top: 15px;
        }

        .save-btn {
            background: #1a1a1a;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 6px;
            font-family: 'Poppins', sans-serif;
            font-weight: 400;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.2s;
            margin-top: 20px;
        }

        .save-btn:hover {
            background: #333;
        }

        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #666;
        }

        .empty-state h3 {
            font-size: 18px;
            margin-bottom: 8px;
            color: #1a1a1a;
        }

        .empty-state p {
            font-size: 14px;
            margin-bottom: 20px;
        }

        .soap-container {
            display: flex;
            gap: 20px;
            height: 100%;
        }

        .soap-left-panel {
            width: 220px;
            border-right: 1px solid #f5f5f5;
            padding-right: 20px;
            display: flex;
            flex-direction: column;
        }

        .soap-right-panel {
            flex: 1;
            display: flex;
            flex-direction: column;
            overflow: auto;
        }

        .visits-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 1px solid #f5f5f5;
        }

        .visits-header h3 {
            font-size: 16px;
            font-weight: 500;
            color: #1a1a1a;
            margin: 0;
        }

        .visits-list {
            flex: 1;
            overflow-y: auto;
            min-height: 300px;
        }

        .visit-item {
            background: white;
            border: 1px solid #e8e8e8;
            border-radius: 6px;
            padding: 12px;
            margin-bottom: 8px;
            cursor: pointer;
            transition: all 0.2s;
        }

        .visit-item:hover {
            border-color: #ddd;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }

        .visit-item.active {
            border-color: #1a1a1a;
            background: #f8f8f8;
        }

        .visit-date {
            font-weight: 500;
            font-size: 14px;
            color: #1a1a1a;
            margin-bottom: 4px;
        }

        .visit-preview {
            font-size: 12px;
            color: #666;
            line-height: 1.4;
        }

        .soap-form-header {
            padding-bottom: 15px;
            border-bottom: 1px solid #f5f5f5;
            margin-bottom: 20px;
            flex-shrink: 0;
        }

        .soap-form-header h3 {
            font-size: 16px;
            font-weight: 500;
            color: #1a1a1a;
            margin: 0;
        }

        .soap-form-content {
            flex: 1;
            display: flex;
            flex-direction: column;
        }

        .soap-form-scrollable {
            flex: 1;
            padding-right: 10px;
        }

        .empty-soap-state {
            text-align: center;
            padding: 40px 20px;
            color: #666;
        }

        .empty-soap-state p {
            font-size: 14px;
            line-height: 1.5;
        }



        .edit-mode .form-input,
        .edit-mode .form-textarea,
        .edit-mode .form-select,
        .edit-mode .vital-input {
            background: white;
            border-color: #e0e0e0;
        }

        .view-mode .form-input,
        .view-mode .form-textarea,
        .view-mode .form-select,
        .view-mode .vital-input {
            background: #f8f8f8;
            border-color: #e8e8e8;
            cursor: default;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .container {
                padding: 10px;
                height: calc(100vh - 60px);
            }

            .header {
                padding: 15px 20px;
                flex-direction: column;
                gap: 15px;
            }

            .header-left {
                justify-content: center;
                width: 100%;
            }

            .content {
                flex-direction: column;
            }

            .sidebar {
                width: 100%;
                max-height: 200px;
                border-right: none;
                border-bottom: 1px solid #f5f5f5;
            }

            .patient-header {
                padding: 20px;
            }
            
            .content-tabs {
                padding: 0 20px;
            }
            
            .scrollable-content {
                padding: 20px;
            }

            .info-grid {
                grid-template-columns: 1fr;
            }

            .vitals-grid {
                grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            }
        }
    </style>